import sounddevice as sd
import numpy as np
import scipy.io.wavfile as wav
import speech_recognition as sr
from googletrans import Translator
import random
import os

duration = 5  # —Å–µ–∫—É–Ω–¥—ã –∑–∞–ø–∏—Å–∏
sample_rate = 44100

recognizer = sr.Recognizer()
translator = Translator()
score = 0
mistakes = 0
max_mistakes = 3
highscore_file = "highscore.txt"

words_by_level_ru = {
    "super_easy": ["—è", "—Ç—ã", "–æ–Ω", "–∫–æ—Ç", "–¥–æ–º", "–º–∞–º–∞", "–º—è—á", "–¥–∞", "–Ω–µ—Ç", "–Ω–æ—Å"],
    "easy": ["—Ä—ã–±–∞", "–µ–¥–∞", "—á–∞–π", "–∑—É–±", "–Ω–æ–≥–∞"],
    "medium": ["–º–∞—à–∏–Ω–∞", "—É—á–∏—Ç–µ–ª—å", "–∑–¥–∞–Ω–∏–µ", "–¥–æ—Ä–æ–≥–∞", "–ø–æ–µ–∑–¥"],
    "hard": ["–≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ", "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"],
    "very_hard": ["–Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å", "—Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ", "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç—å"],
    "hardcore": [
        "–≥–∏–ø–µ—Ä—Å–µ–Ω–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å", "–¥–µ–∏–¥–µ–æ–ª–æ–≥–∏–∑–∞—Ü–∏—è", "–∏–Ω—Ç–µ—Ä—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å",
        "–º–µ—Ç–∞—Ñ–∏–∑–∏—á–Ω–æ—Å—Ç—å", "–∞–Ω—Ç–∏–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å", "—Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ—Å—Ç—å",
        "–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è", "–∫–æ–Ω—Ç—Ä–≥–µ–≥–µ–º–æ–Ω–∏—á–Ω–æ—Å—Ç—å", "–¥–∏—Ö–æ—Ç–æ–º–∏—á–Ω–æ—Å—Ç—å", "–º–µ—Ç–∞—Ñ–æ—Ä–∏–∑–∞—Ü–∏—è"
    ]
}

words_by_level_en = {
    "super_easy": ["cat", "dog", "sun", "yes", "no", "hat", "car", "man", "mom", "pen"],
    "easy": ["apple", "fish", "tea", "leg", "tooth"],
    "medium": ["teacher", "building", "train", "road", "window"],
    "hard": ["imagination", "proposal", "research", "expression", "explanation"],
    "very_hard": ["unpredictability", "selfrealization", "responsibility", "diversity", "controversy"],
    "hardcore": [
        "hypersensitivity", "deideologization", "intertextuality",
        "metaphysicality", "unconstitutionality", "reflexivity",
        "infrastructurization", "counterhegemony", "dichotomy", "metaphorization"
    ]
}

words_by_level_de = {
    "super_easy": ["ich", "du", "er", "katze", "haus", "mama", "ball", "ja", "nein", "nase"],
    "easy": ["fisch", "essen", "tee", "zahn", "bein"],
    "medium": ["auto", "lehrer", "geb√§ude", "stra√üe", "zug"],
    "hard": ["vorstellungskraft", "satz", "forschung", "eindruck", "erkl√§rung"],
    "very_hard": ["unvorhersehbarkeit", "selbstverwirklichung", "verantwortung", "vielfalt", "widerspr√ºchlichkeit"],
    "hardcore": [
        "hypersensitivit√§t", "deideologisierung", "intertextualit√§t",
        "metaphysischkeit", "verfassungswidrigkeit", "reflexivit√§t",
        "infrastrukturierung", "konterhegemonie", "dichotomie", "metaphorisierung"
    ]
}

def load_highscore():
    if os.path.exists(highscore_file):
        with open(highscore_file, "r") as f:
            return int(f.read().strip())
    return 0

def save_highscore(new_score):
    with open(highscore_file, "w") as f:
        f.write(str(new_score))

print("""
  _____                                                         __          __           _ 
 |  __ \                                                 /\     \ \        / /          | |
 | |__) | __ ___  _ __   ___  _   _ _ __   ___ ___      /  \     \ \  /\  / /__  _ __ __| |
 |  ___/ '__/ _ \| '_ \ / _ \| | | | '_ \ / __/ _ \    / /\ \     \ \/  \/ / _ \| '__/ _` |
 | |   | | | (_) | | | | (_) | |_| | | | | (_|  __/   / ____ \     \  /\  / (_) | | | (_| |
 |_|   |_|  \___/|_| |_|\___/ \__,_|_| |_|\___\___|  /_/    \_\     \/  \/ \___/|_|  \__,_|
                                                                                           
                                                                                           """)
print("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ü—Ä–æ–∏–∑–Ω–µ—Å–∏ —Å–ª–æ–≤–æ'!")

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
while True:
    lang_input = input("\n–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ (ru/en/de): ").strip().lower()
    if lang_input == "ru":
        language_code = "ru-RU"
        words_by_level = words_by_level_ru
        translate_to = "en"
        print("‚úÖ –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π")
        break
    elif lang_input == "en":
        language_code = "en-US"
        words_by_level = words_by_level_en
        translate_to = "ru"
        print("‚úÖ Language: English")
        break
    elif lang_input == "de":
        language_code = "de-DE"
        words_by_level = words_by_level_de
        translate_to = "ru"
        print("‚úÖ Sprache: Deutsch")
        break
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ 'ru', 'en' –∏–ª–∏ 'de'.")

print("\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:")
print("1. üîò –°–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
print("2. üë§ –í—ã–±–æ—Ä –≤—Ä—É—á–Ω—É—é")

while True:
    mode_input = input("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ")
    if mode_input == "1":
        manual_mode = False
        print("‚úÖ –†–µ–∂–∏–º: –°–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
        break
    elif mode_input == "2":
        manual_mode = True
        print("‚úÖ –†–µ–∂–∏–º: –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è")
        break
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if manual_mode:
    print("\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    for i, level in enumerate(words_by_level.keys(), 1):
        print(f"{i}. {level}")

    while True:
        try:
            choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è (1-6): "))
            selected_level = list(words_by_level.keys())[choice - 1]
            break
        except (ValueError, IndexError):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    print(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å: {selected_level}")

highscore = load_highscore()
print(f"üèÜ –†–µ–∫–æ—Ä–¥: {highscore}")

while mistakes < max_mistakes:
    level = selected_level if manual_mode else random.choice(list(words_by_level.keys()))
    word = random.choice(words_by_level[level])
    print(f"\nüéØ –£—Ä–æ–≤–µ–Ω—å: {level}")
    print(f"üß† –ü—Ä–æ–∏–∑–Ω–µ—Å–∏ —Å–ª–æ–≤–æ: {word}")

    print("üéô –ì–æ–≤–æ—Ä–∏...")
    recording = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype="int16")
    sd.wait()
    wav.write("output.wav", sample_rate, recording)

    with sr.AudioFile("output.wav") as source:
        audio = recognizer.record(source)

    try:
        recognized = recognizer.recognize_google(audio, language=language_code).lower()
        print(f"üó£ –¢—ã —Å–∫–∞–∑–∞–ª: {recognized}")

        if recognized == word.lower():
            print("‚úÖ –í–µ—Ä–Ω–æ!")
            score += 1
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")
            mistakes += 1

        translation = translator.translate(recognized, dest=translate_to)
        print(f"üåê –ü–µ—Ä–µ–≤–æ–¥: {translation.text}")

    except sr.UnknownValueError:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
        mistakes += 1
    except sr.RequestError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
        break

    print(f"üéØ –û—á–∫–∏: {score} | ‚ùå –û—à–∏–±–∫–∏: {mistakes}/{max_mistakes}")

if score > highscore:
    print(f"\nüéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! {score} –æ—á–∫–æ–≤!")
    save_highscore(score)
else:
    print(f"\nüìä –¢–≤–æ–π —Å—á—ë—Ç: {score}. –†–µ–∫–æ—Ä–¥: {highscore}")

print("üõë –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
print("""
                                                                     .-'''-.                                                           ___      ___      ___   
                                                                    '   _    \                                                      .'/   \  .'/   \  .'/   \  
                    __  __   ___         __.....__                /   /` '.   \.----.     .----.   __.....__                       / /     \/ /     \/ /     \ 
  .--./)           |  |/  `.'   `.   .-''         '.             .   |     \  ' \    \   /    /.-''         '.                     | |     || |     || |     | 
 /.''\\            |   .-.  .-.   ' /     .-''"'-.  `.           |   '      |  ' '   '. /'   //     .-''"'-.  `. .-,.--.           | |     || |     || |     | 
| |  | |      __   |  |  |  |  |  |/     /________\   \          \    \     / /  |    |'    //     /________\   \|  .-. |          |/`.   .'|/`.   .'|/`.   .' 
 \`-' /    .:--.'. |  |  |  |  |  ||                  |           `.   ` ..' /   |    ||    ||                  || |  | |           `.|   |  `.|   |  `.|   |  
 /("'`    / |   \ ||  |  |  |  |  |\    .-------------'              '-...-'`    '.   `'   .'\    .-------------'| |  | |            ||___|   ||___|   ||___|  
 \ '---.  `" __ | ||  |  |  |  |  | \    '-.____...---.                           \        /  \    '-.____...---.| |  '-             |/___/   |/___/   |/___/  
  /'""'.\  .'.''| ||__|  |__|  |__|  `.             .'                             \      /    `.             .' | |                 .'.--.   .'.--.   .'.--.  
 ||     ||/ /   | |_                   `''-...... -'                                '----'       `''-...... -'   | |                | |    | | |    | | |    | 
 \'. __// \ \._,\ '/                                                                                             |_|                \_\    / \_\    / \_\    / 
  `'---'   `--'  `"                                                                                                                  `''--'   `''--'   `''--'  
""")
print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!")